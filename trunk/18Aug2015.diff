Index: src/org/apache/pig/parser/AliasMasker.g
===================================================================
--- src/org/apache/pig/parser/AliasMasker.g	(revision 1692301)
+++ src/org/apache/pig/parser/AliasMasker.g	(working copy)
@@ -86,8 +86,15 @@
           | split_statement
           | realias_statement
           | assert_statement
+          | sau_command	
 ;
 
+sau_command : set_command
+			| clear_command
+			| help_command
+			| history_command
+;
+
 split_statement : split_clause
 ;
 
@@ -182,6 +189,24 @@
     : ^( LOAD filename func_clause? as_clause? )
 ;
 
+set_command
+    : ^(SET IDENTIFIER QUOTEDSTRING)
+    | ^(SET IDENTIFIER INTEGER)
+    | ^(SET EXTENDEDID INTEGER)
+    | SET
+;
+
+clear_command : CLEAR
+;
+
+help_command : HELP
+;
+
+history_command
+	: HISTORY
+	| ^(HISTORY NOLINENUMBER)
+;
+
 filename
     : QUOTEDSTRING
 ;
Index: src/org/apache/pig/parser/AstValidator.g
===================================================================
--- src/org/apache/pig/parser/AstValidator.g	(revision 1692301)
+++ src/org/apache/pig/parser/AstValidator.g	(working copy)
@@ -118,8 +118,15 @@
           | realias_statement
           | register_statement
           | assert_statement
+          | sau_command
 ;
 
+sau_command : set_command
+			| clear_command
+			| help_command
+			| history_command
+;
+
 split_statement : split_clause
 ;
 
@@ -132,6 +139,23 @@
 assert_statement : assert_clause
 ;
 
+set_command : ^(SET IDENTIFIER QUOTEDSTRING)
+    		| ^(SET IDENTIFIER INTEGER)
+    		| ^(SET EXTENDEDID INTEGER)
+    		| SET
+;
+
+clear_command : CLEAR
+;
+
+help_command : HELP
+;
+
+history_command
+	: HISTORY
+	| ^(HISTORY NOLINENUMBER)
+;
+
 general_statement : ^( STATEMENT ( alias { aliases.add( $alias.name ); } )? op_clause parallel_clause? )
 ;
 
Index: src/org/apache/pig/parser/LogicalPlanBuilder.java
===================================================================
--- src/org/apache/pig/parser/LogicalPlanBuilder.java	(revision 1692301)
+++ src/org/apache/pig/parser/LogicalPlanBuilder.java	(working copy)
@@ -18,11 +18,15 @@
 
 package org.apache.pig.parser;
 
+import java.io.BufferedReader;
+import java.io.File;
 import java.io.IOException;
+import java.io.StringReader;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.net.MalformedURLException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -31,6 +35,7 @@
 
 import org.antlr.runtime.IntStream;
 import org.antlr.runtime.RecognitionException;
+import org.apache.pig.PigServer;
 import org.apache.pig.ExecType;
 import org.apache.pig.FuncSpec;
 import org.apache.pig.LoadFunc;
@@ -100,11 +105,17 @@
 import org.apache.pig.newplan.logical.visitor.ProjStarInUdfExpander;
 import org.apache.pig.newplan.logical.visitor.ProjectStarExpander;
 import org.apache.pig.newplan.logical.visitor.ResetProjectionAttachedRelationalOpVisitor;
+import org.apache.pig.tools.pigscript.parser.ParseException;
 import org.apache.pig.validator.BlackAndWhitelistFilter;
 import org.apache.pig.validator.PigCommandFilter;
 
-public class LogicalPlanBuilder {
+import org.fusesource.jansi.Ansi;
+import org.fusesource.jansi.AnsiConsole;
 
+import com.google.common.collect.Lists;
+
+public class LogicalPlanBuilder{
+
     private LogicalPlan plan = new LogicalPlan();
 
     private String lastRel = null;
@@ -120,6 +131,7 @@
     Map<String, String> fileNameMap;
 
     private PigContext pigContext = null;
+    private PigServer mPigServer = null;
     private String scope = null;
     private IntStream intStream;
     private int storeIndex = 0;
@@ -126,6 +138,7 @@
     private int loadIndex = 0;
 
     private final BlackAndWhitelistFilter filter;
+    private PigCommandFilter filterGrunt;
 
     private static NodeIdGenerator nodeIdGen = NodeIdGenerator.getGenerator();
 
@@ -134,21 +147,25 @@
     }
 
     LogicalPlanBuilder(PigContext pigContext, String scope, Map<String, String> fileNameMap,
-            IntStream input) {
+            IntStream input) throws ExecException, IOException, ParseException {
         this.pigContext = pigContext;
+        PigServer mPigServer = new PigServer(pigContext);
         this.scope = scope;
         this.fileNameMap = fileNameMap;
         this.intStream = input;
         this.filter = new BlackAndWhitelistFilter(this.pigContext);
+        this.filterGrunt = new BlackAndWhitelistFilter(mPigServer);
     }
 
-    LogicalPlanBuilder(IntStream input) throws ExecException {
+    LogicalPlanBuilder(IntStream input) throws ExecException, IOException, ParseException {
         pigContext = new PigContext( ExecType.LOCAL, new Properties() );
         pigContext.connect();
+        PigServer mPigServer = new PigServer(pigContext);
         this.scope = "test";
         this.fileNameMap = new HashMap<String, String>();
         this.intStream = input;
         this.filter = new BlackAndWhitelistFilter(this.pigContext);
+        this.filterGrunt = new BlackAndWhitelistFilter(mPigServer);
     }
 
     Operator lookupOperator(String alias) {
@@ -181,6 +198,133 @@
         pigContext.registerFunction( alias, fs );
     }
 
+    void setCommand(){
+        System.out.println("Set!");
+        // filterGrunt.validate(PigCommandFilter.Command.SET);
+        // Properties jobProps = mPigServer.getPigContext().getProperties();
+        // Properties sysProps = System.getProperties();
+
+        // List<String> jobPropsList = Lists.newArrayList();
+        // List<String> sysPropsList = Lists.newArrayList();
+
+        // for (Object key : jobProps.keySet()) {
+        //     String propStr = key + "=" + jobProps.getProperty((String) key);
+        //     if (sysProps.containsKey(key)) {
+        //         sysPropsList.add("system: " + propStr);
+        //     } else {
+        //         jobPropsList.add(propStr);
+        //     }
+        // }
+        // Collections.sort(jobPropsList);
+        // Collections.sort(sysPropsList);
+        // jobPropsList.addAll(sysPropsList);
+        // for (String prop : jobPropsList) {
+        //     System.out.println(prop);
+        // }
+    }
+
+    void setCommand(String key, String value){
+        System.out.println("SET! " + key + " " + value);
+        // filterGrunt.validate(PigCommandFilter.Command.SET);
+        // key = mPigServer.getPigContext().doParamSubstitution(new BufferedReader(new StringReader(key))).trim();
+        // value = mPigServer.getPigContext().doParamSubstitution(new BufferedReader(new StringReader(value))).trim();
+        // if (key.equals("debug"))
+        // {
+        //     if (value.equals("on"))
+        //         mPigServer.debugOn();
+        //     else if (value.equals("off"))
+        //         mPigServer.debugOff();
+        //     else
+        //         throw new ParseException("Invalid value " + value + " provided for " + key);
+        // }
+        // else if (key.equals("job.name"))
+        // {
+        //     mPigServer.setJobName(value);
+        // }
+        // else if (key.equals("job.priority"))
+        // {
+        //     mPigServer.setJobPriority(value);
+        // }
+        // else if (key.equals("stream.skippath")) {
+        //     // Validate
+        //     File file = new File(value);
+        //     if (!file.exists() || file.isDirectory()) {
+        //         throw new IOException("Invalid value for stream.skippath:" +
+        //                               value);
+        //     }
+        //     mPigServer.addPathToSkip(value);
+        // }
+        // else if (key.equals("default_parallel")) {
+        //     // Validate
+        //     try {
+        //         mPigServer.setDefaultParallel(Integer.parseInt(value));
+        //     } catch (NumberFormatException e) {
+        //         throw new ParseException("Invalid value for default_parallel");
+        //     }
+        // }
+        // else
+        // {
+        //    mPigServer.getPigContext().getExecutionEngine().setProperty(key, value);
+        // }
+    }
+
+    void clearCommand(){
+        AnsiConsole.systemInstall();
+        Ansi ansi = Ansi.ansi();
+        System.out.println( ansi.eraseScreen() );
+        System.out.println( ansi.cursor(0, 0) );
+        AnsiConsole.systemUninstall();
+    }
+
+    void helpCommand(){
+        System.out.println("Commands:");
+        System.out.println("<pig latin statement>; - See the PigLatin manual for details: http://hadoop.apache.org/pig");
+        System.out.println("File system commands:");
+        System.out.println("    fs <fs arguments> - Equivalent to Hadoop dfs command: http://hadoop.apache.org/common/docs/current/hdfs_shell.html");
+        System.out.println("Diagnostic commands:");
+        System.out.println("    describe <alias>[::<alias] - Show the schema for the alias. Inner aliases can be described as A::B.");
+        System.out.println("    explain [-script <pigscript>] [-out <path>] [-brief] [-dot|-xml] [-param <param_name>=<param_value>]");
+        System.out.println("        [-param_file <file_name>] [<alias>] - Show the execution plan to compute the alias or for entire script.");
+        System.out.println("        -script - Explain the entire script.");
+        System.out.println("        -out - Store the output into directory rather than print to stdout.");
+        System.out.println("        -brief - Don't expand nested plans (presenting a smaller graph for overview).");
+        System.out.println("        -dot - Generate the output in .dot format. Default is text format.");
+        System.out.println("        -xml - Generate the output in .xml format. Default is text format.");
+        System.out.println("        -param <param_name - See parameter substitution for details.");
+        System.out.println("        -param_file <file_name> - See parameter substitution for details.");
+        System.out.println("        alias - Alias to explain.");
+        System.out.println("    dump <alias> - Compute the alias and writes the results to stdout.");
+        System.out.println("Utility Commands:");
+        System.out.println("    exec [-param <param_name>=param_value] [-param_file <file_name>] <script> - ");
+        System.out.println("        Execute the script with access to grunt environment including aliases.");
+        System.out.println("        -param <param_name - See parameter substitution for details.");
+        System.out.println("        -param_file <file_name> - See parameter substitution for details.");
+        System.out.println("        script - Script to be executed.");
+        System.out.println("    run [-param <param_name>=param_value] [-param_file <file_name>] <script> - ");
+        System.out.println("        Execute the script with access to grunt environment. ");
+        System.out.println("        -param <param_name - See parameter substitution for details.");
+        System.out.println("        -param_file <file_name> - See parameter substitution for details.");
+        System.out.println("        script - Script to be executed.");
+        System.out.println("    sh  <shell command> - Invoke a shell command.");
+        System.out.println("    kill <job_id> - Kill the hadoop job specified by the hadoop job id.");
+        System.out.println("    set <key> <value> - Provide execution parameters to Pig. Keys and values are case sensitive.");
+        System.out.println("        The following keys are supported: ");
+        System.out.println("        default_parallel - Script-level reduce parallelism. Basic input size heuristics used by default.");
+        System.out.println("        debug - Set debug on or off. Default is off.");
+        System.out.println("        job.name - Single-quoted name for jobs. Default is PigLatin:<script name>");
+        System.out.println("        job.priority - Priority for jobs. Values: very_low, low, normal, high, very_high. Default is normal");
+        System.out.println("        stream.skippath - String that contains the path. This is used by streaming.");
+        System.out.println("        any hadoop property.");
+        System.out.println("    help - Display this message.");
+        System.out.println("    history [-n] - Display the list statements in cache.");
+        System.out.println("        -n Hide line numbers. ");
+        System.out.println("    quit - Quit the grunt shell.");
+    }
+
+    void historyCommand(boolean withNumbers){
+        mPigServer.printHistory(withNumbers);
+    }
+
     LogicalPlan getPlan() {
         return plan;
     }
Index: src/org/apache/pig/parser/LogicalPlanGenerator.g
===================================================================
--- src/org/apache/pig/parser/LogicalPlanGenerator.g	(revision 1692301)
+++ src/org/apache/pig/parser/LogicalPlanGenerator.g	(working copy)
@@ -39,8 +39,11 @@
 @header {
 package org.apache.pig.parser;
 
+import java.io.IOException;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.pig.backend.executionengine.ExecException;
 import org.apache.pig.impl.PigContext;
 import org.apache.pig.impl.builtin.GFAny;
 import org.apache.pig.impl.logicalLayer.FrontendException;
@@ -98,6 +101,7 @@
 import org.apache.pig.data.DataBag;
 import org.apache.pig.data.DataType;
 import org.apache.pig.data.Tuple;
+import org.apache.pig.tools.pigscript.parser.ParseException;
 import java.util.Arrays;
 import java.util.Collections;
 import java.math.BigInteger;
@@ -137,13 +141,13 @@
     throw e;
 }
 
-public LogicalPlanGenerator(TreeNodeStream input, LogicalPlanBuilder builder) {
+public LogicalPlanGenerator(TreeNodeStream input, LogicalPlanBuilder builder){
     this(input, new RecognizerSharedState());
     this.builder = builder;
 }
 
 public LogicalPlanGenerator(TreeNodeStream input, PigContext pigContext, String scope,
-    Map<String, String> fileNameMap) {
+    Map<String, String> fileNameMap) throws ExecException, IOException, ParseException {
     this( input );
     builder = new LogicalPlanBuilder( pigContext, scope, fileNameMap, input );
 }
@@ -175,8 +179,15 @@
  | realias_statement
  | assert_statement
  | register_statement
+ | sau_command
 ;
 
+sau_command : set_command
+			| clear_command
+			| help_command
+			| history_command
+;
+
 split_statement : split_clause
 ;
 
@@ -1688,6 +1699,51 @@
    }
 ;
 
+set_command
+  : ^(SET IDENTIFIER QUOTEDSTRING)
+  {
+    builder.setCommand( $IDENTIFIER.text, $QUOTEDSTRING.text );
+  }
+  | ^(SET IDENTIFIER INTEGER)
+  {
+    builder.setCommand( $IDENTIFIER.text, $INTEGER.text);
+  }
+  | ^(SET EXTENDEDID INTEGER)
+  {
+  	builder.setCommand($EXTENDEDID.text, $INTEGER.text);
+  }
+  | SET
+  {
+    builder.setCommand();
+  }
+;
+
+clear_command : 
+CLEAR
+{
+	builder.clearCommand();	
+}
+;
+
+help_command : 
+HELP
+{
+	builder.helpCommand();	
+}
+;
+
+history_command : 
+HISTORY
+{
+	builder.historyCommand(true);	
+}
+|
+HISTORY NOLINENUMBER
+{
+	builder.historyCommand(false);
+}
+;
+
 split_clause
  : ^( SPLIT
       rel
Index: src/org/apache/pig/parser/QueryLexer.g
===================================================================
--- src/org/apache/pig/parser/QueryLexer.g	(revision 1692301)
+++ src/org/apache/pig/parser/QueryLexer.g	(working copy)
@@ -75,6 +75,18 @@
 DEFINE : 'DEFINE'
 ;
 
+SET :   'SET'
+;
+
+CLEAR : 'CLEAR'
+;
+
+HELP : 'HELP'
+;
+
+HISTORY : 'HISTORY'
+;
+
 LOAD   : 'LOAD'
 ;
 
@@ -365,6 +377,9 @@
 INTEGER: ( DIGIT )+
 ;
 
+EXTENDEDID : ID PERIOD ID
+;
+
 LONGINTEGER: INTEGER 'L'
 ;
 
@@ -483,3 +498,6 @@
 
 FAT_ARROW : '=>'
 ;
+
+NOLINENUMBER : '-n'
+;
\ No newline at end of file
Index: src/org/apache/pig/parser/QueryParser.g
===================================================================
--- src/org/apache/pig/parser/QueryParser.g	(revision 1692301)
+++ src/org/apache/pig/parser/QueryParser.g	(working copy)
@@ -225,6 +225,7 @@
           | realias_clause SEMI_COLON!
           | register_clause SEMI_COLON!
           | assert_clause SEMI_COLON!
+          | sau_command
           // semicolons after foreach_complex_statement are optional for backwards compatibility, but to keep
           // the grammar unambiguous if there is one then we'll parse it as a single, standalone semicolon
           // (which matches the first statement rule)
@@ -231,6 +232,12 @@
           | foreach_statement
 ;
 
+sau_command : set_command
+			| clear_command
+			| help_command
+			| history_command
+;
+
 nested_op_clause : LEFT_PAREN! op_clause parallel_clause? RIGHT_PAREN!
                  | LEFT_PAREN FOREACH rel ( foreach_plan_complex | ( foreach_plan_simple parallel_clause? ) ) RIGHT_PAREN
                     -> ^( FOREACH rel foreach_plan_complex? foreach_plan_simple? ) parallel_clause?
@@ -481,6 +488,22 @@
 assert_clause : ASSERT^ rel BY! cond ( COMMA! QUOTEDSTRING )?
 ;
 
+set_command: SET^ IDENTIFIER QUOTEDSTRING
+	| SET^ IDENTIFIER INTEGER
+	| SET^ EXTENDEDID INTEGER
+	| SET^
+;
+
+clear_command : CLEAR^
+;
+
+help_command : HELP^
+;
+
+history_command : HISTORY^
+				| HISTORY^ NOLINENUMBER
+;
+
 filter_clause : FILTER^ rel BY! cond
 ;
 
Index: src/org/apache/pig/tools/grunt/GruntParser.java
===================================================================
--- src/org/apache/pig/tools/grunt/GruntParser.java	(revision 1692301)
+++ src/org/apache/pig/tools/grunt/GruntParser.java	(working copy)
@@ -440,12 +440,8 @@
     }
 
     @Override
-    protected void printClear() {
-        AnsiConsole.systemInstall();
-        Ansi ansi = Ansi.ansi();
-        System.out.println( ansi.eraseScreen() );
-        System.out.println( ansi.cursor(0, 0) );
-        AnsiConsole.systemUninstall();
+    protected void printClear() throws IOException {
+        // mPigServer.registerQuery("clear");
     }
 
     @Override
@@ -571,72 +567,75 @@
 
     @Override
     protected void processSet(String key, String value) throws IOException, ParseException {
-        filter.validate(PigCommandFilter.Command.SET);
-        key = parameterSubstitutionInGrunt(key);
-        value = parameterSubstitutionInGrunt(value);
-        if (key.equals("debug"))
-        {
-            if (value.equals("on"))
-                mPigServer.debugOn();
-            else if (value.equals("off"))
-                mPigServer.debugOff();
-            else
-                throw new ParseException("Invalid value " + value + " provided for " + key);
-        }
-        else if (key.equals("job.name"))
-        {
-            mPigServer.setJobName(value);
-        }
-        else if (key.equals("job.priority"))
-        {
-            mPigServer.setJobPriority(value);
-        }
-        else if (key.equals("stream.skippath")) {
-            // Validate
-            File file = new File(value);
-            if (!file.exists() || file.isDirectory()) {
-                throw new IOException("Invalid value for stream.skippath:" +
-                                      value);
-            }
-            mPigServer.addPathToSkip(value);
-        }
-        else if (key.equals("default_parallel")) {
-            // Validate
-            try {
-                mPigServer.setDefaultParallel(Integer.parseInt(value));
-            } catch (NumberFormatException e) {
-                throw new ParseException("Invalid value for default_parallel");
-            }
-        }
-        else
-        {
-           mPigServer.getPigContext().getExecutionEngine().setProperty(key, value);
-        }
+        // mPigServer.registerQuery("set " + key + " " + value);
+    //     filter.validate(PigCommandFilter.Command.SET);
+    //     key = parameterSubstitutionInGrunt(key);
+    //     value = parameterSubstitutionInGrunt(value);
+    //     if (key.equals("debug"))
+    //     {
+    //         if (value.equals("on"))
+    //             mPigServer.debugOn();
+    //         else if (value.equals("off"))
+    //             mPigServer.debugOff();
+    //         else
+    //             throw new ParseException("Invalid value " + value + " provided for " + key);
+    //     }
+    //     else if (key.equals("job.name"))
+    //     {
+    //         mPigServer.setJobName(value);
+    //     }
+    //     else if (key.equals("job.priority"))
+    //     {
+    //         mPigServer.setJobPriority(value);
+    //     }
+    //     else if (key.equals("stream.skippath")) {
+    //         // Validate
+    //         File file = new File(value);
+    //         if (!file.exists() || file.isDirectory()) {
+    //             throw new IOException("Invalid value for stream.skippath:" +
+    //                                   value);
+    //         }
+    //         mPigServer.addPathToSkip(value);
+    //     }
+    //     else if (key.equals("default_parallel")) {
+    //         // Validate
+    //         try {
+    //             mPigServer.setDefaultParallel(Integer.parseInt(value));
+    //         } catch (NumberFormatException e) {
+    //             throw new ParseException("Invalid value for default_parallel");
+    //         }
+    //     }
+    //     else
+    //     {
+    //        mPigServer.getPigContext().getExecutionEngine().setProperty(key, value);
+    //     }
     }
 
     @Override
     protected void processSet() throws IOException, ParseException {
-        filter.validate(PigCommandFilter.Command.SET);
-        Properties jobProps = mPigServer.getPigContext().getProperties();
-        Properties sysProps = System.getProperties();
+        // mPigServer.registerQuery("set");
 
-        List<String> jobPropsList = Lists.newArrayList();
-        List<String> sysPropsList = Lists.newArrayList();
+    //     filter.validate(PigCommandFilter.Command.SET);
+    //     Properties jobProps = mPigServer.getPigContext().getProperties();
+    //     Properties sysProps = System.getProperties();
 
-        for (Object key : jobProps.keySet()) {
-            String propStr = key + "=" + jobProps.getProperty((String) key);
-            if (sysProps.containsKey(key)) {
-                sysPropsList.add("system: " + propStr);
-            } else {
-                jobPropsList.add(propStr);
-            }
-        }
-        Collections.sort(jobPropsList);
-        Collections.sort(sysPropsList);
-        jobPropsList.addAll(sysPropsList);
-        for (String prop : jobPropsList) {
-            System.out.println(prop);
-        }
+    //     List<String> jobPropsList = Lists.newArrayList();
+    //     List<String> sysPropsList = Lists.newArrayList();
+
+    //     for (Object key : jobProps.keySet()) {
+    //         String propStr = key + "=" + jobProps.getProperty((String) key);
+    //         if (sysProps.containsKey(key)) {
+    //             sysPropsList.add("system: " + propStr);
+    //         } else {
+    //             jobPropsList.add(propStr);
+    //         }
+    //     }
+    //     Collections.sort(jobPropsList);
+    //     Collections.sort(sysPropsList);
+    //     jobPropsList.addAll(sysPropsList);
+    //     for (String prop : jobPropsList) {
+    //         System.out.println(prop);
+    //     }
     }
 
     @Override
@@ -900,54 +899,17 @@
 
     @Override
     protected void processHistory(boolean withNumbers) {
-        mPigServer.printHistory(withNumbers);
+        // if(withNumbers)
+        //     mPigServer.registerQuery("history");
+        // else
+        //     mPigServer.registerQuery("help -n");
+        // mPigServer.printHistory(withNumbers);
     }
 
     @Override
-    protected void printHelp()
+    protected void printHelp() throws IOException
     {
-        System.out.println("Commands:");
-        System.out.println("<pig latin statement>; - See the PigLatin manual for details: http://hadoop.apache.org/pig");
-        System.out.println("File system commands:");
-        System.out.println("    fs <fs arguments> - Equivalent to Hadoop dfs command: http://hadoop.apache.org/common/docs/current/hdfs_shell.html");
-        System.out.println("Diagnostic commands:");
-        System.out.println("    describe <alias>[::<alias] - Show the schema for the alias. Inner aliases can be described as A::B.");
-        System.out.println("    explain [-script <pigscript>] [-out <path>] [-brief] [-dot|-xml] [-param <param_name>=<param_value>]");
-        System.out.println("        [-param_file <file_name>] [<alias>] - Show the execution plan to compute the alias or for entire script.");
-        System.out.println("        -script - Explain the entire script.");
-        System.out.println("        -out - Store the output into directory rather than print to stdout.");
-        System.out.println("        -brief - Don't expand nested plans (presenting a smaller graph for overview).");
-        System.out.println("        -dot - Generate the output in .dot format. Default is text format.");
-        System.out.println("        -xml - Generate the output in .xml format. Default is text format.");
-        System.out.println("        -param <param_name - See parameter substitution for details.");
-        System.out.println("        -param_file <file_name> - See parameter substitution for details.");
-        System.out.println("        alias - Alias to explain.");
-        System.out.println("    dump <alias> - Compute the alias and writes the results to stdout.");
-        System.out.println("Utility Commands:");
-        System.out.println("    exec [-param <param_name>=param_value] [-param_file <file_name>] <script> - ");
-        System.out.println("        Execute the script with access to grunt environment including aliases.");
-        System.out.println("        -param <param_name - See parameter substitution for details.");
-        System.out.println("        -param_file <file_name> - See parameter substitution for details.");
-        System.out.println("        script - Script to be executed.");
-        System.out.println("    run [-param <param_name>=param_value] [-param_file <file_name>] <script> - ");
-        System.out.println("        Execute the script with access to grunt environment. ");
-        System.out.println("        -param <param_name - See parameter substitution for details.");
-        System.out.println("        -param_file <file_name> - See parameter substitution for details.");
-        System.out.println("        script - Script to be executed.");
-        System.out.println("    sh  <shell command> - Invoke a shell command.");
-        System.out.println("    kill <job_id> - Kill the hadoop job specified by the hadoop job id.");
-        System.out.println("    set <key> <value> - Provide execution parameters to Pig. Keys and values are case sensitive.");
-        System.out.println("        The following keys are supported: ");
-        System.out.println("        default_parallel - Script-level reduce parallelism. Basic input size heuristics used by default.");
-        System.out.println("        debug - Set debug on or off. Default is off.");
-        System.out.println("        job.name - Single-quoted name for jobs. Default is PigLatin:<script name>");
-        System.out.println("        job.priority - Priority for jobs. Values: very_low, low, normal, high, very_high. Default is normal");
-        System.out.println("        stream.skippath - String that contains the path. This is used by streaming.");
-        System.out.println("        any hadoop property.");
-        System.out.println("    help - Display this message.");
-        System.out.println("    history [-n] - Display the list statements in cache.");
-        System.out.println("        -n Hide line numbers. ");
-        System.out.println("    quit - Quit the grunt shell.");
+        // mPigServer.registerQuery("help");
     }
 
     @Override
Index: src/org/apache/pig/tools/pigscript/parser/PigScriptParser.jj
===================================================================
--- src/org/apache/pig/tools/pigscript/parser/PigScriptParser.jj	(revision 1692301)
+++ src/org/apache/pig/tools/pigscript/parser/PigScriptParser.jj	(working copy)
@@ -66,7 +66,7 @@
 
 	abstract protected void printAliases() throws IOException;
 
-	abstract protected void printClear();
+	abstract protected void printClear() throws IOException;
 
 	abstract protected void processFsCommand(String[] cmdTokens) throws IOException;
 
@@ -100,7 +100,7 @@
 
 	abstract protected void processPWD() throws IOException;
 
-	abstract protected void printHelp();
+	abstract protected void printHelp() throws IOException;
 
 	abstract protected void processMove(String src, String dst) throws IOException;
 
@@ -149,7 +149,6 @@
 
 // commands
 TOKEN: {<CAT: "cat">}
-TOKEN: {<CLEAR: "clear">}
 TOKEN: {<FS: "fs">}
 TOKEN: {<SH:"sh">}
 TOKEN: {<CD: "cd">}
@@ -163,8 +162,6 @@
 TOKEN: {<ALIASES: "aliases">}
 TOKEN: {<EXPLAIN: "explain">}
 TOKEN: {<EXPLAIN_SHORT: "\\e">}
-TOKEN: {<HELP: "help">}
-TOKEN: {<HISTORY: "history">}
 TOKEN: {<KILL: "kill">}
 TOKEN: {<LS: "ls">}
 TOKEN: {<MOVE: "mv">}
@@ -177,7 +174,6 @@
 TOKEN: {<AS: "as"> }
 TOKEN: {<REMOVE: "rm">}
 TOKEN: {<REMOVEFORCE: "rmf">}
-TOKEN: {<SET: "set">}
 TOKEN: {<ILLUSTRATE: "illustrate">}
 TOKEN: {<ILLUSTRATE_SHORT: "\\i">}
 TOKEN: {<RUN: "run">}
@@ -256,6 +252,10 @@
 |   <"store"> : PIG_START
 |   <"assert"> : PIG_START
 |   <"import"> : PIG_START
+|   <"set"> : PIG_START
+|	<"help"> : PIG_START
+|	<"clear"> : PIG_START
+|	<"history"> : PIG_START
 |   <(["a"-"z", "A"-"Z"])+(["a"-"z", "A"-"Z"] | ["0"-"9"] | "_")*(" " | "\t")*"="> : PIG_START
 |   <"=>" (" " | "\t")*> : PIG_START
 |   < <IDENTIFIER> (" " | "\t")* ("," (" " | "\t")* <IDENTIFIER> )* (" " | "\t")* "="> : PIG_START
@@ -270,10 +270,9 @@
 |   <(" " | "\t")+["G","g"]["E","e"]["N","n"]["E","e"]["R","r"]["A","a"]["T","t"]["E","e"](" " | "\t")+ > {prevState = PIG_START;} : GENERATE
 |       <"{"> {pigBlockLevel = 1;} : IN_BLOCK
 |       <"}"> {if (true) throw new TokenMgrError("Unmatched '}'", TokenMgrError.LEXICAL_ERROR);}
-|       <";"> : PIG_END
 |	<"--"> {prevState = PIG_START;} : SINGLE_LINE_COMMENT
 |	<"/*"> {prevState = PIG_START;} : MULTI_LINE_COMMENT
-|	<("\n" | "\r" | "\r\n")> {secondary_prompt();}
+|	<("\n" | "\r" | "\r\n" | ";")>: PIG_END
 |       <(~[])>
 }
 
@@ -479,8 +478,6 @@
 	{processCat(t1.image);}
 	)+
 	|
-	Clear()
-	|
 	<CD>
 	(
 		t1 = GetPath()
@@ -529,11 +526,6 @@
 	|
 	Explain()
 	|
-	<HELP>
-	{printHelp();}
-	|
-	History()
-	|
 	<KILL>
 	t1 = <IDENTIFIER>
 	{processKill(t1.image);}
@@ -596,15 +588,6 @@
 	<SCRIPT_DONE>
 	{quit();}
 	|
-	<SET>
-	(
-		t1 = GetKey()
-		t2 = GetValue()
-		{processSet(t1.image, unquote(t2.image));}
-    	|
-		{processSet();}
-	)
-	|
     <PIGDEFAULT>
 	t1 = GetKey()
 	t2 = GetDefaultValue()
@@ -627,14 +610,6 @@
 	)
 }
 
-void Clear():
-{
-}
-{
-	<CLEAR>
-	{printClear();}
-}
-
 void Illustrate() throws IOException:
 {
 	Token t;
@@ -676,19 +651,6 @@
 	{processIllustrate(alias, script, target, params, files);}
 }
 
-void History():
-{
-	boolean withNumbers = true;
-}
-{
-	<HISTORY>
-	(
-		<N>
-        {withNumbers = false;}
-	)?
-	{processHistory(withNumbers);}
-}
-
 void Explain() throws IOException:
 {
 	Token t;
@@ -841,8 +803,6 @@
 	|
 	t = <CD>
 	|
-	t = <CLEAR>
-	|
 	t = <COPY>
 	|
 	t = <COPYFROMLOCAL>
@@ -867,10 +827,6 @@
 	|
 	t = <ILLUSTRATE_SHORT>
 	|
-	t = <HELP>
-	|
-	t = <HISTORY>
-	|
 	t = <KILL>
 	|
 	t = <LS>
@@ -893,8 +849,6 @@
 	|
 	t = <REMOVE>
 	|
-	t = <SET>
-	|
 	t = <SCRIPT_DONE>
 	|
 	t = <RUN>
